/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package br.net.carloseugenio.gradle.tomcat

import org.junit.After
import org.junit.Before
import org.mockserver.integration.ClientAndServer
import org.mockserver.model.Header
import org.mockserver.model.HttpRequest
import org.mockserver.model.HttpResponse
import spock.lang.Specification
import org.gradle.testkit.runner.GradleRunner

import java.nio.file.Path
import java.nio.file.Paths

import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE
import org.mockserver.logging.MockServerLogger
import static org.mockserver.integration.ClientAndServer.startClientAndServer

/**
 * A simple functional test for the 'br.net.carloseugenio.gradle.tomcat.greeting' plugin.
 */
class GradleTomcatPluginFunctionalTest extends Specification {

    String SUCCESS = "BUILD SUCCESSFUL"
    Path projectDir
    ClientAndServer mockServer

    static {
        MockServerLogger.setRootLogLevel("org", "DEBUG")
        //MockServerLogger.setRootLogLevel("org", System.getProperty("root.logLevel", "DEBUG"))
    }

    @Before
    def "set up"() {
        println "Deleting..."
        projectDir = Paths.get("build/functionalTest")
        projectDir.deleteDir()
        println "Creating file structure..."
        projectDir.toFile().mkdirs()
        println "Created: ${projectDir}: ${projectDir.toFile().exists()}"
        def sourceDir = projectDir.toAbsolutePath().resolve("src/main/java/tomcat/")
        println "Creating: ${sourceDir.toFile()} ... on ${sourceDir.toFile().absolutePath}"
        sourceDir.toFile().mkdirs()
        def sourceFile = sourceDir.toAbsolutePath().resolve("Test.java")
        println "Creating file: ${sourceFile.toFile().absolutePath}"
        sourceFile.append("package tomcat;\npublic class Test {}\n")
        def libFile = projectDir.toAbsolutePath().resolve("lib.jar")
        libFile.toFile().createNewFile()

        mockServer = startClientAndServer(8080)
    }

    @After
    def "after"() {
        mockServer.stop()
    }

    def "prepare deploy task create required dirs"() {
        given:
        new File(projectDir.toFile(), "settings.gradle") << ""
        new File(projectDir.toFile(), "build.gradle") << """
            plugins {
                id('br.net.carloseugenio.gradle.tomcat')
                id 'war'
            }
            repositories {
                flatDir {
                    dirs '.'
                }
            }
            dependencies {
                runtime files('lib.jar')
            }
            tomcat {
                runtimePaths = [ "base1", "base2" ]
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("prepareDeploy", "--stacktrace")
        runner.withProjectDir(projectDir.toFile())
        def result = runner.build()

        then:
        result.output.contains(SUCCESS)
        def buildDir = projectDir.toAbsolutePath().resolve("build" ).toFile()
        buildDir.listFiles().find { it.name.contains("base1") } != null
        assert projectDir.toAbsolutePath().resolve("build/tomcatRuntime/lib.jar").toFile().exists()
    }

    def "can run deploy task"() {
        given:
        mockServer.when(
                HttpRequest.request().withPath("/manager/text/deploy")
        ).respond(
                HttpResponse.response().
                        withHeaders(new Header(CONTENT_TYPE.toString(), "text/plain")).
                        withBody("OK".getBytes("UTF-8"))
        )
        new File(projectDir.toFile(), "functionalTest.xml") << """
            <Context docBase="${projectDir.toAbsolutePath()}" reloadable="false">
                <Resources>
                    <PreResources base="${projectDir.toAbsolutePath()}/build/classes/java/main"
                          className="org.apache.catalina.webresources.DirResourceSet"
                          webAppMount="/WEB-INF/classes"/>
                </Resources>
            </Context>
        """
        new File(projectDir.toFile(), "settings.gradle") << ""
        new File(projectDir.toFile(), "build.gradle") << """
            plugins {
                id('br.net.carloseugenio.gradle.tomcat')
                id 'war'
            }
            repositories {
                flatDir {
                    dirs '.'
                }
            }
            dependencies {
                runtime files('lib.jar')
            }
            tomcat {
                contextFile = file('functionalTest.xml')
                runtimePaths = [ "classes/java/main" ]
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("deploy", "--stacktrace")
        runner.withProjectDir(projectDir.toFile())
        def result = runner.build()

        then:
        result.output.contains(SUCCESS) \
            && !result.output.contains("FAIL") \
            && result.output.contains("received: OK")
    }

    def "can run undeploy task"() {
        given:
        mockServer.when(
                HttpRequest.request().withPath("/manager/text/undeploy")
        ).respond(
                HttpResponse.response().
                        withHeaders(new Header(CONTENT_TYPE.toString(), "text/plain")).
                        withBody("OK".getBytes("UTF-8"))
        )
        new File(projectDir.toFile(), "functionalTest.xml") << """
            <Context docBase="${projectDir.toAbsolutePath()}" reloadable="false">
                <Resources>
                    <PreResources base="${projectDir.toAbsolutePath()}/build/classes/java/main"
                          className="org.apache.catalina.webresources.DirResourceSet"
                          webAppMount="/WEB-INF/classes"/>
                </Resources>
            </Context>
        """
        new File(projectDir.toFile(), "settings.gradle") << ""
        new File(projectDir.toFile(), "build.gradle") << """
            plugins {
                id('br.net.carloseugenio.gradle.tomcat')
                id 'war'
            }
            repositories {
                flatDir {
                    dirs '.'
                }
            }
            dependencies {
                runtime files('lib.jar')
            }
            tomcat {
                contextFile = file('functionalTest.xml')
                runtimePaths = [ "classes/java/main" ]
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()

        runner.withArguments("undeploy", "--stacktrace")
        runner.withProjectDir(projectDir.toFile())
        def result = runner.build()

        then:
        result.output.contains(SUCCESS) \
            && !result.output.contains("FAIL") \
            && result.output.contains("received: OK")

    }

}
