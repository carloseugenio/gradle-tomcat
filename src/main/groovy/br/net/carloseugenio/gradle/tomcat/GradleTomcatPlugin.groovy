/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package br.net.carloseugenio.gradle.tomcat

import groovyx.net.http.HttpBuilder
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.Task
import org.gradle.api.tasks.Copy

import static groovyx.net.http.HttpBuilder.configure

/**
 * A simple 'hello world' plugin.
 */
class GradleTomcatPlugin implements Plugin<Project> {

    private final String ROOT_EXTENSION_NAME = "tomcat"

    private Project project
    private TomcatExtension extension

    void apply(Project project) {
        this.project = project

        verifyPreconditions()

        createTomcatExtension()

        addTomcatDeployersTasks()
    }

    def verifyPreconditions() {
        if (project.pluginManager.findPlugin("war") == null) {
            throw new IllegalStateException("The war plugin should have been applied!")
        }
    }

    void addTomcatDeployersTasks() {
        def builder = configure({
            request.uri = "http://${extension.server}:${extension.port}"
            request.auth.basic "${extension.user}", "${extension.password}"
        })

        println "Builder created: $builder"

        createPrepareDeployTask()

        createDeployTask(builder)

        def commands = [
                'undeploy': 'Un-deploy (remove) the application from server',
                'reload': 'Reloads the application on server',
                'start': 'Starts the application on server',
                'stop': 'Stops the application on server'
        ]
        commands.each { key, value -> regularGet(builder, key, value) }
    }

    def createDeployTask(HttpBuilder builder) {
        project.task('deploy', dependsOn: 'prepareDeploy') {
            group 'Gradle Tomcat'
            description 'Deploy (installs) the application into a running Tomcat server instance'
            doFirst {
                verifyDirs()
                builder.get({
                    request.uri.path = "/manager/text/deploy"
                    request.uri.query = [config: "file:${extension.contextFile.absolutePath}", path: "/${project.name}"]
                    response.success { fs, obj ->
                        println 'I received: ' + obj
                    }
                    response.exception { ex ->
                        throw new IllegalStateException("Exception executing task [deploy]: ${ex}")
                    }
                })
            }
        }
    }

    private void verifyDirs() {
        if (extension.contextFile == null) {
            extension.contextFile = project.file("build/resources/generated/${project.name}.xml")
            println "ATTENTION, Tomcat context file not provided. Trying to use default: ${extension.contextFile}"
        }
        if (!extension.contextFile.exists()) {
            throw new IllegalArgumentException("The Tomcat context file [${extension.contextFile}] does not exists!")
        }
        // The main tomcat web app dir must exist!
        def srcDir = project.file("src")
        def mainWebAppDir = srcDir.toPath().resolve("main/webapp").toFile()
        mainWebAppDir.mkdirs()

        def preResources = new XmlParser().parseText(extension.contextFile.text).Resources.PreResources
        preResources.each {
            def base = it.@'base'
            new File(base).mkdirs()
        }
    }

    def createPrepareDeployTask() {
        Task prepareDeployTask = project.task('prepareDeploy', type: Copy, dependsOn: "war") {
            group = 'Gradle Tomcat'
            description = 'Prepares the required directories for deploy on Tomcat'
            doFirst {
                println "Running prepare deploy task..."
                def tomcatRuntimePath = project.file("${extension.baseDir}/tomcatRuntime")
                if (tomcatRuntimePath.exists()) {
                    tomcatRuntimePath.delete()
                }
                extension.runtimePaths.each {
                    def f = "${extension.baseDir}/${it}".replaceAll("//", "/")
                    project.file(f).mkdirs()
                }
            }
            from project.configurations.runtimeClasspath
            into "${extension.baseDir}/tomcatRuntime"
        }
        prepareDeployTask.outputs.upToDateWhen { false }
    }

    def regularGet(builder, command, taskDescription) {
        def task = project.task(command) {
            group 'Gradle Tomcat'
            description taskDescription
            doFirst {
                try {
                    builder.get({
                        request.uri.path = "/manager/text/${command}"
                        request.uri.query = [path: "/${project.name}"]
                        response.success { fs, obj ->
                            println "Success. I received: ${obj}"
                        }
                    })
                } catch (Exception ex) {
                    ex.printStackTrace()
                    println "Exception on get: $ex : $ex.cause"
                    throw ex
                }
            }
        }
        if ('reload' == command) {
            task.dependsOn 'prepareDeploy'
        }
    }

    def createTomcatExtension() {
        // Create the extension so the build can configure the task
        this.extension = project.extensions.create(ROOT_EXTENSION_NAME, TomcatExtension, project)
    }
}
